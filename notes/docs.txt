

CODE DECORATORS (aka sort of like macros):

I've been working on things like "% modes" for Salvus this weekend,
and I now strongly agree with you that your decision to deprecate
"time foo" in favor of "%time foo" is the way to go.   In Salvus, I'm
not implementing "time foo", "attach foo", "load foo", etc., but
instead % things that do the same thing.  (I might put time/attach/foo
with deprecation warnings.)

I am, however, against the double percent (%%) thing that Ipython uses
for cell level "magics".  It took me quite awhile to be convinced that
they are not a good idea, so I doubt I can convince you in a short
email.  The main two reasons I'm against them are:

  (1) This *hugely* breaks backward compatibility with Sage worksheets
-- there are surely tons of worksheets with "%r", "%gap", etc., in
them.  Requiring "%%" would break every single one of them.  That's
pretty major.

 (2) It is completely unnecessary.   Use

%foo

for a "cell level magic" and

%foo rest of line

for a line level magic.     One has to allow optional arguments, of course:

%foo(optional arguments)
  cell content

and

%foo(optional arguments) rest of line       # for line level "magic".

I prefer to call these "magics" instead "code decorators".  Of course,
there is a fine line between "code decorators" and macros.   If Python
had macros, probably we wouldn't have this conversation.

Here's an example of the sorts of cells one can have in salvus:

Line level:

%timeit(number=5)  2+3

%timeit 2^5

%timeit(preparse=False) 2**5

Cell level:

######## a whole cell
%timeit(number=10)
a = 5
b = 10
a*b
#######

I've also made it so all of these code decorators must be valid Python
objects -- there is no weird magic behind the scenes.  It is also easy
to add more, e.g., if you want to define something that tells you
whenever you define a new variable:

def new_vars(s):
    a = globals().keys()
    salvus.execute(s)
    for k in globals().keys():
        if k not in a:
             print "Defining", k

(There are also other hooks which are needed for %time, especially so
%time can be combined with other modes like %r, %python, etc.)

Then you can have a cell like:

#-----------------------------------------  they don't have to be at
the top -- everything below them is impacted
%new_vars
xyz = 15
a = 2
b = 3
R.<z> = QQ[]


And on a line you can do:

%new_vars   R.<m> = QQ[]; s = 10


The nice thing is that every 'cell level' code decorator is also a
line level one, and conversely, so you don't get pointless and
confusing messages like:

  ERROR: Line magic function `%ruby` not found (But cell magic
`%%ruby` exists, did you mean that instead?).


In short, I extended the Python language a little to have a very
simple parametric macro system, which maybe isn't needed for python
programming in files (it would be confusing and hard to read there),
but is incredibly useful when using an interactive notebook
environment, since entering triple-quoted strings as input to
functions sucks.
