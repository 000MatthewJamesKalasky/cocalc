NOW:

Worker:

How will this work?  

* It runs as either root or normal user
* Imports the sage library
* Client connects to socket
* Fork
* If running as root, change to user:
        import os, pwd
        if os.system('whoami') == 'root'
            user = 'sagews'
            os.setegid(pwd.getpwnam(user)[3])
            os.seteuid(pwd.getpwnam(user)[2])
  * then, fix any environment and PATH issues, e.g., DOT_SAGE
* If running as normal user, just gets new session as usual, running as same user as the server




SOON:



PLAN: Implement each component without UI polish.

  * Client -- Javascript library that runs in any modern web browser
    [ ] Write very simple ugly version that is fully functional.

  * Load Balancer -- HAProxy
    [ ] Learn how to deploy it and write config script.
        Example config script on some SockJS site.

  * Database -- PostgreSQL + SQLalchemy + Memcached + SSL
    [ ] Assemble SQLalchemy schema by combining what is current
        frontend and backend schema, plus actually store github bundle.

  * Worker -- forking SSL socket server + Sage + JSON
    [ ] Rewrite pulling code from backend.py in order to make this
        into a single integrated component with a straightforward API.

  * Backend -- HTTPS SockJS server; "create workspace" into DB queries; connect to worker
    [ ] Rewrite what I have to use SockJS (remove socket.io)

  * Static HTTP server -- simple nginx (no ssl)
    [ ] Configuration so my static/ directory served using nginx.
    [ ] Ability to serve static/ content created via statically publishing workspaces

  * Log server -- SSL socket server + database writer + Python logging
    [ ] update to use PostgreSQL database
