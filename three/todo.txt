NOW:
   [ ] base class functionality for each component:
          * start(which='all')
          * status(which='all')
          * stop(which='all')

SOON:

   [ ] refactor existing code to work as above 
   [ ] admin: support start/stop/status backends
   [ ] admin: support start/stop/status workers
   [ ] admin: support start/stop/status log server
   [ ] implement basic message routing between workers and connected clients (?)
   [ ] two different haproxies at once (so either can be used if the other dies)
   [ ] sqlalchemy postgresql central DB server
        - do test: what is overhead of storing a BLOB of a git bundle?

IDEAS:
[ ] sudo worker.py -- executing commands doesn't work at all on Linux
    (but does on OS X), so probably a resource issue?
[ ] move all certfile generation stuff to a single master control / launcher module
[ ] startup time -- after fork even after importing sage -- is *very* slow.  Fix.
[ ] make it so client knows port of server?
[ ] worker.py -- anti DOS measures (from users on own machine?)
[ ] configuration framework
[ ] rewrite reset_all_accounts/reset_account to use that worker.py is root.
[ ] log server going down is *fatal* to worker
PLAN: Implement each component without UI polish.
  * Client -- Javascript library that runs in any modern web browser
    [ ] Write very simple ugly version that is fully functional.
  * Load Balancer -- HAProxy
    [ ] Learn how to deploy it and write config script.
        Example config script on some SockJS site.
  * Database -- PostgreSQL + SQLalchemy + Memcached + SSL
    [ ] Assemble SQLalchemy schema by combining what is current
        frontend and backend schema, plus actually store github bundle.
  * Worker -- forking SSL socket server + Sage + JSON
    [ ] Rewrite pulling code from backend.py in order to make this
        into a single integrated component with a straightforward API.
  * Backend -- HTTPS SockJS server; "create workspace" into DB queries; connect to worker
    [ ] Rewrite what I have to use SockJS (remove socket.io)
  * Static HTTP server -- simple nginx (no ssl)
    [ ] Configuration so my static/ directory served using nginx.
    [ ] Ability to serve static/ content created via statically publishing workspaces
  * Log server -- SSL socket server + database writer + Python logging
    [ ] update to use PostgreSQL database
    [ ] make it timeout connections that it forks off
    [ ] can I rewrite to use tornado so it's a single process (no forking)?  that would scale more

DONE:
[x] proper basic worker.py logging
[x] fix Ctrl-D EOF bug in worker.py -- process gets left running full steam on EOF
[x] worker: forked process gets left as a zombie when it quits; fix this.
[x] implement auth token for worker
[x] user switching: How will this work?  
* It runs as either root or normal user
* Imports the sage library
* Client connects to socket
* Fork
* If running as root, change to user:
        import os, pwd
        if os.system('whoami') == 'root'
            user = 'sagews'
            os.setegid(pwd.getpwnam(user)[3])
            os.seteuid(pwd.getpwnam(user)[2])
  * then, fix any environment and PATH issues, e.g., DOT_SAGE
* If running as normal user, just gets new session as usual, running
  as same user as the server
[x] worker.py -- list of users for switching (command line option)
[x] todos near /tmp/xyz
[x] fix: server terminates when any client disconnects if we don't ignore SIGCHLD.

[x] clients must be killed after n seconds (another limit):
      - use a separate thread in the worker root process
      - it will check every n seconds to see if anything needs to be killed:
           use the Connection object
      - if so, sends SIGQUIT, SIGKILL, etc. 

[x] when main server terminates, it needs to kill the other thread that is watching
    for connections to kill.

[x] clean up certfile in worker a bit

[x] limiting memory usage doesn't work at all:
  -- this is a well-known OS X "bug"/feature?
   sage: import resource
sage: resource.setrlimit(resource.RLIMIT_DATA, (10,10))
sage: v = range(10^9)
/Users/wstein/sage/build/sage-5.0/spkg/bin/sage: line 311: 51632 Killed: 9               sage-ipython "$@" -i

This works perfectly on Linux:

  megs=1000; resource.setrlimit(resource.RLIMIT_AS, (megs * 1048576L, -1L))
[x] create basic launcher / master control script
-- ensure data directory exist and has right permissions
-- read configuration file
-- start relevant services on various machines:
   - haproxy
   - nginx
   - postgreSQL server
   - memcached
   - backend(s)
   - worker(s)


[x] build system working on linux
[x] serve static files with nginx
[x] haproxy to nginx
[x] psql database

[x] simple tornado+sockjs+haproxy demo
[x] simple load balancing + haproxy + sockjs demo
[x] move the one static file to nginx instead of tornado
   [x] optparse backend.py
   [x] new file: sagews.conf 
   [x] move conf files to a subdirectory conf/
   [x] rename "launch.py" to "admin.py". 

