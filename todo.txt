TODO
-----

NOW: 
SOON:

   [ ] database: when any component is started, entry is made in database
   [ ] database: when any component is stopped, entry is made in database
   [ ] database: function to check validity of entries; if anything not current, then updated.

   [ ] database: table of connected browers and which tornado server they are connected to

   [ ] tornado: implement sending message to any connected browser, possibly connected to a different tornado

   [ ] sage_server: "./config1 --restart=sage_server" doesn't work
   [ ] sage_server: sage_server.py dies when run in daemon mode -- for now just run as subproc, but need to fix this
   [ ] sage_server/tornado: range(10^4 ) *reliably* fails to get the final I/O terminate message through from tornado to browser.
   [ ] sage_server: specify tornado sage_servers by putting them in a config file, which the
       tornado monitors for changes (via file descriptor)
   [ ] sage_server: when sage_server.py killed, it doesn't properly clean up the processes that it forked off.   
   [ ] sage_server: max limit on number of simultaneous sage_server processes allowed by sage_server server
   [ ] sage_server: sudo sage_server.py -- executing commands doesn't work at all on Linux
       (but does on OS X), so probably a resource issue?

   [ ] tornado: dropbox oauth: dropbox too 
   [ ] haproxy: this line in haproxy conf looks wrong/misleading since I settled on a file, right? 
             #daemon   -- commented out so I can just log to stdout 
   [ ] haproxy: two different haproxies at once (so either can be used if the other dies)
   [ ] logging: format for date part of every log message, so in
       database the time when log row was *record* could be set,
       instead of the time of insertion in DB.  
   [ ] browser/sage_server/tornado: interacts
   [ ] browser/sage_server/tornado: 2d graphics
   [ ] tornado/database: shortened url database
   [ ] I didn't build openVPN with LZO, but I should so all network traffic is compressed, saving money.
   [ ] come up with deployment plan
   [ ] setup openVPN
   [ ] admin: make default admin import less verbose

VAGUE:



   [ ] sqlalchemy postgresql central DB server
        - do test: what is overhead of storing a BLOB of a git bundle?
   [ ] scalability test: using sage_server.py, but running on a different VM
   [ ] scalability test: test using tornado.py(s), also running on different VM's
   [ ] think about how to separate my data into multiple database for scalability
   [ ] multiple haproxies for high availability:
    - do what stackoverflow does: heartbeat + haproxy: http://blog.stackoverflow.com/2010/01/stack-overflow-network-configuration/; http://www.linux-ha.org/wiki/Main_Page
    - this discussion says to use "DNS failover":  
        * http://www.webhostingtalk.com/archive/index.php/t-1117385.html
        * http://www.dnsmadeeasy.com/
    - this page talks about round robin DNS, which seems sensible to me:
      http://blog.engelke.com/2011/06/07/web-resilience-with-round-robin-dns/
   [ ] reduce number of mime types in nginx.conf, since I will barely serve anything??
   [ ] move all certfile generation stuff to a single master control / launcher module
   [ ] startup time -- after fork even after importing sage -- is *very* slow.  Fix.
   [ ] make it so client knows port of server?
   [ ] sage_server.py -- anti DOS measures (from users on own machine?)
   [ ] configuration framework
   [ ] rewrite reset_all_accounts/reset_account to use that sage_server.py is root.
   [ ] log server going down is *fatal* to sage_server

DONE:
   [x] tornado: decide on way for any tornado to send a message to any connected
       user, possibly connected to a different tornado:
       Proposal 2 (accepted):
         - tornados will have token from database
         - add to ioloop listening on SSL+TCP socket (encrypted); only accept connection when given token
         - send ProtoBuf messages
         - connection terminated if no messages sent over it for t seconds
         - *maybe* connections proxied through haproxy, so that tornado is not actually on an external network.
           I don't know if using haproxy is needed or a good idea; it is a small detail in the implementation.
       Proposal 1 (rejected):
         - tornados will have access to a token they read from database, which they know but
           not publicly available (since tornados have to be able to get personal user data, 
           the database must support this).
         - Add another url handler:  /message
            POST message with variables:
                 token: the token
                 message: the message, as a ProtoBuf -- the message format should have user id of recipient as part of message
         - haproxy will also map 
                /tornado[n]/... to the n-th tornado.
         - each tornado has an id number (the n above)
         - tornado communication will go via stunnel, so is secure
           outside of LAN, where it matters
         - messages might suggest pulling down static web content (e.g, describing an image), 
           and url will be /tornado[n]/static/[id].[ext]
         Thoughts: the above seems untenable because of the overhead in estabilishing a complete 
         HTTPS connection for every single message. 
   [x] tornado: find a way to move the code for "Persistent connections to sage_servers" into another file (like
       is done with "Authentication with Facebook, Google, and DropBox (TODO)")
   [x] yes, use a vpn???
         I'm thinking about how to structure services, define their location,
         make it so every service can connect to every other one, etc. 
         One possibility is that I setup a VPN connecting all the
         physical sites.   Hmmm.  
         It looks like openVPN is a good choice. 
            http://openvpn.net/index.php/open-source/overview.html
         It takes only a few seconds to build from source.  It's small.  The documentation
         seems excellent.  And using this will make it so I can easily use exactly one
         config script to manage all the sites at once, that any node can talk to any 
         other node, while they are all still behind a layer of security (not directly
         on the web), etc. 
   [x] add openvpn to build.py -- easy to build on linux; not sure how yet on OS X!
   [x] tornado: postgresql async client for tornado -- needed to
       implement tornado socket communication (just a little), and
       will be generally very important.   This is the canonical
       solution, but might be substantial work to implement with sqlalchemy
           https://gist.github.com/861193
       Another possibility that looks better:
           [x] do not use SQLalchemy at all (sad, but I have only written
               a few lines in logwatch.py so far in my newest version, so this
               shouldn't be hard).
           [x] Directly use psycopg2 (which has builtin async support) and 
               momoko which officially supports using PostgreSQL + Tornado.
       This would explicitly tie us to PostgreSQL.
    
    [x] tornado communication system working with ports hardcoded and no encryption
    [x] tornado communication system with encryption
    [x] html: make "Thyme" name clear.

   [x] haproxy: put in a port 80 redirect to port 443
       XX sadly, haproxy alone *can't* do this -- http://www.mentby.com/Group/haproxy/http-https-redirects.html
       XX but haproxy + nginx should be able to, but that is complicated.
       ---> we will in the long run have a canonical site name, so let's just make that work with a template.
   [x] admin: config1 --status should default to status=all.
   [x] admin: redo the very limited use of templates to use python standard library templates.
   [x] haproxy, etc.: clean up specification of ports, especially for haproxy -- should be part of Process creation, not a file -- template the conf
   [x] admin: rename "backned" to "tornado_server"/Tornado, sage_server to sage_server/Sage
   [x] rename backend_sage to tornado_sage; rename backend_mesg to tornado_mesg
   [x] rebrand to "salvus"
   [x] gracefully degrade when memcached dies: this is evidently 100% automatic by the client! WOW
   [x] tornado: should degrade gracefully when sage server vanishes...
   [x] obtain an SSL certificate for https://salvusmath.com
         https://wiki.cac.washington.edu/display/infra/UW+Certificate+Services
       * Don't use UW's because their FAQ says: "Will all UW web servers
         eventually get certs from the UW Services CA?  No, not at
         all. Even when the UW Services CA expands its scope there
         will be many cases where it is still appropriate for a web
         server to use a certificate from a commercial CA. For
         example, if a web server has many users from outside the UW
         it will probably want to use a commercial CA certificate."
       * Good instructions: http://clearcove.ca/2010/11/how-to-secure-a-rails-app-on-heroku-with-ssl-firesheep/
       * Googling "godaddy ssl" really does provide a $12.99 deal for a year certificate!

   [x] delete thyme gmail account (see msecure)
   [x] create salvusmath gmail account
   [x] change github repo to be called salvus (instead of sagews)
   [x] massive renames and moves

