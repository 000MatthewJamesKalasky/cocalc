    ###############################################################
    # jquery plugins for manipulating the contenteditable editor
    # in ways I need, using rangy mostly for cross-platform support
    # TODO: Move this to its own file.
    ###############################################################
    $.fn.extend
        # set_caret_position: move the cursor to given position in the given element
        salvusws_set_caret_position: (opts={}) ->
            opts = defaults opts,
                offset: 0
                type:   'character'   # 'range', 'character'
            @each () ->
                range = rangy.createRange()
                if opts.type == 'range'
                    range.setStart(this, opts.offset)
                    range.setEnd(this, opts.offset)
                else
                    range.selectCharacters(this, opts.offset, opts.offset)
                sel = rangy.getSelection()
                if sel.rangeCount > 0
                    sel.removeAllRanges()
                sel.addRange(range)

    class CaretPosition
        constructor: (@container, @offset) ->
        equals: (other) ->  # true if this and other are at the same position
            @container == other.container and @offset == other.offset
        set: (type='range') -> # moves the cursor to this position, if it exists
            range = rangy.createRange()
            range.setStart(@container, @offset)
            range.setEnd(@container, @offset)
            sel = rangy.getSelection()
            if sel.rangeCount > 0
                sel.removeAllRanges()
            sel.addRange(range)

    get_caret_position = () ->
        try
            sel   = rangy.getSelection()
            range = sel.getRangeAt(0)
            return new CaretPosition(range.startContainer, range.startOffset)
        catch error
            return undefined  # no caret position

--------------
        salvusws_text: (opts={}) ->   # returns text rather than a jquery wrapped object
            opts = defaults opts, {} # no options
            result = ''
            @each () ->
                that = this
                async.series([
                    (cb) -> client.html_to_text(html:$(that).html(), cb:((error, plain) -> result += plain; cb()))
                ])
                # This was the rangy implementation, but it was 10000 times slower than htmlparser, so screw that!
                #r = rangy.createRange()
                #r.selectNodeContents(this)
                #result += r.text()

            # &nbsp;'s are converted to character code 160, not 32 (which is a space).
            # We thus must replace all 32's by 160, or sage will be unhappy:
            return result.replace(/\xA0/g, " ")


                #cell.draggable().bind("click", () -> $(this).focus())
                #last_active_cell = active_cell = cell
                #.blur((e) -> active_cell=undefined; highlight(input:$(this)) )


                        #r2 = rangy.createRange()
                        #r2.selectNodeContents(newNode)
                        #r2.moveStart("character", 1)
                        #sel.setSingleRange(r2)
                        #sel.deleteFromDocument(r2)
                        #
                        sel.removeAllRanges()
                        r2 = rangy.createRange()
                        r2.setStart(newNode,1)
                        r2.setEnd(newNode,1)
                        if sel.rangeCount > 0
                            sel.removeAllRanges()
                        sel.addRange(r2)
                        return false

                        # r2 = rangy.createRange()
                        # r2.selectNodeContents(newNode)
                        # r2.moveStart("character", 1)
                        # sel.setSingleRange(r2)
                        # sel.deleteFromDocument(r2)

                        # sel.removeAllRanges()
                        # r2 = rangy.createRange()
                        # r2.setStart(newNode,1)
                        # r2.setEnd(newNode,1)
                        # if sel.rangeCount > 0
                        #     sel.removeAllRanges()
                        # sel.addRange(r2)

                        return false



        old_email_address = account_settings.settings.email_address
        account_settings.settings.email_address = $("#account-change_email_new_address").val()
        $("#account-change_email_new_address").val("")

        account_settings.save_to_server
            password   : password
            cb         : (error, mesg) ->
                console.log(error, mesg)
                account_settings.settings.email_address = old_email_address
                if error  # exceptional condition -- some sort of server or connection error
                    alert_message(type:"error", message:error)
                    return true   # kill modal (since this is a weird error condition)
                if mesg.event != "changed_email_address" # exceptional condition -- a *BUG*
                    alert_message(type:"error", message:"Internal or network error changing email address.")
                    return true   # kill modal
                if mesg.error  # there was an error
                    if mesg.reason?
                        $("#account-change_email_address-#{mesg.reason}").show()
                        return false
                    else
                        alert_message(type:"error", message:mesg.error)
                        return true
                else # no errors
                    $("#account-settings-email_address").html(mesg.new_email_address)
                    account_settings.settings.email_address = mesg.new_email_address
                    return true   # kill modal

        Mercury.config.behaviors.execute2 = (selection, options) ->
            e = selection.wrap('<div class="sage-cell">', true)
            console.log(e)
            e.execute_cell()

        Mercury.config.behaviors.execute = (selection, options) ->
            input = selection.textContent()
            output = ""
            salvus_exec input, (mesg) ->
                console.log(mesg)
                if mesg.stdout?
                    output += "<span class='sage-stdout'>#{mesg.stdout}</span>"
                if mesg.stderr?
                    output += "<span class='sage-stderr'>#{mesg.stderr}</span>"
                selection.insertNode("<span>" + input + "<br>" + output + "</span>")
                Mercury.trigger('reinitialize')
        
    $(window).on 'mercury:ready', () ->


