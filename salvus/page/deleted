            cm = @opts.cm
            pos = cm.getCursor()
            cursor = "\u5077"
            cm.replaceRange(cursor, pos)
            scroll = cm.getScrollInfo()
            new_value = diffsync.dmp.patch_apply(p, @string())[0]
            line = 0
            for v in new_value.split('\n')
                ch = v.indexOf(cursor)
                if ch != -1
                    break
                else
                    line += 1
            if ch != -1
                pos = {line:line, ch:ch}
            cm.setValue(new_value)
            cm.replaceRange("", pos, {line:line, ch:ch+1})
            cm.setCursor(pos) # TODO -- read and implement http://neil.fraser.name/writing/cursor/
            cm.scrollTo(scroll.left, scroll.top)




    _objs_to_propagate: (changeObj) =>
        # Return only the part of the input changeObj that we want to propagate to other editors.
        # In particular, we do not include ones for which origin is not set, since they are caused
        # by the replaceRange we call internally when applying a changeObj.  Returns undefined
        # if nothing to propagate
        cur = result = undefined
        while changeObj?
            if changeObj.origin? and changeObj.origin != 'setValue'
                console.log("including #{changeObj}")
                if result?
                    cur.next = changeObj
                    cur = changeObj
                else
                    cur = result = changeObj
            changeObj = changeObj.next
        if result? and result.next?
            delete result.next
        return result

    render_file_display: (path, cb) =>
        salvus_client.exec
            project_id : @project.project_id
            command    : "cat"
            args       : [path]
            timeout    : 3
            max_output : 100000
            cb         : (err, output) =>
                if err
                    cb($("<div>").html(err))
                else
                    cb($("<pre style='background-color:#fff; padding:2ex; margin-left:2ex;'>").text(output.stdout))

    xxx_render_file_display: (path, cb) =>
        salvus_client.read_text_file_from_project
            project_id : @project.project_id
            timeout : 3
            path : path
            cb : (err, mesg) ->
                if err
                    cb($("<div>").html("Unable to load file..."))
                else if mesg.event == 'error'
                    cb($("<div>").html(mesg.error))
                else
                    cb($("<pre style='background-color:#fff; padding:2ex; margin-left:2ex;'>").text(mesg.content))


# jQuery mod for detecting DOC removal
# See http://stackoverflow.com/questions/2200494/jquery-trigger-event-when-an-element-is-removed-from-the-dom
# Usage:   $('.thing').bind('destroyed', () -> )
$.event.special.destroyed =
    remove: (o) ->
        if o.handler
            o.handler()



    _next_cell0 : (cell) ->
        next = cell.element.next()
        if next.length == 0
            elt = cell.element.parent().closest(".salvus-unit")
            n = elt.next()
            if n.length == 0
                elt = elt.parent().closest(".salvus-unit")
            else
                elt = n
        else
            elt = next
        while elt.length > 0
            if elt.hasClass("salvus-cell")
                return elt.data("cell")
            n = elt.find(".salvus-cell")
            if n.length > 0
                return $(n[0]).data("cell")
            n = elt.next()
            if n.length == 0
                elt = elt.parent().closest(".salvus-unit")
            else
                elt = n


        prev = cell.element.prev()
        if prev.length == 0
            elt = cell.element.parent().closest(".salvus-unit").prev()
        else
            elt = prev
        while elt.length > 0
            if elt.hasClass("salvus-cell")
                return elt.data("cell")
            n = elt.find(".salvus-cell")
            if n.length > 0
                return $(n[n.length-1]).data("cell")
            n = elt.prev()
            if n.length == 0
                elt = elt.parent().closest(".salvus-unit").prev()
        if IS_ANDROID
            submit = (ev) =>
                alert(ev.keyCode)
                if ev.keyCode == 13
                    @.session.write_data(@mobile_target.val())
                    @mobile_target.val('')
                else
                    return false
            $(document).on('keydown',submit).on('keypress',submit)
        else
            @terminal.focus()

        # 2. Mark special styles of the output text:
        #  THIS IS INSANELY SLOW/USELESS
        # y = start
        # m = 0
        # while y <= end
        #     row = y + terminal.ydisp
        #     ln = this.lines[row]
        #     for i in [0...width]
        #         data = ln[i][0]
        #         if data != terminal.defAttr
        #             m += 1
        #             if m > 30
        #                 break
        #             e.markText({line:row, ch:i}, {line:row, ch:i+1}, {className:'special'})
        #             console.log('marking some text')
        #     y++
        # console.log("DONE MARKING")



  <section class="slide">
    <h2>Extensions</h2>
    <p>Core gives you basic slide functionality...</p>
    <ul>
      <li class="slide">
        <h3  class="well btn btn-success btn-large">deck.goto</h3>
        <p>Adds a shortcut key to jump to any slide number...</p>
      </li>
      <li class="slide"><div class="slide-cell"></div></li>
      <li class="slide"><div class="slide-cell"></div></li>
    </ul>
  </section>

  <section class="slide">
    <div class="slide-cell"></div>
    <h2>Extensions</h2>
    <p>Core gives you basic slide functionality...</p>
    <h2>Extensions</h2>
    <p>Core gives you basic slide functionality...</p>
    <h2>Extensions</h2>
    <p>Core gives you basic slide functionality...</p>
    <h2>Extensions</h2>
    <p>Core gives you basic slide functionality...</p>
    <h2>Extensions</h2>
    <p>Core gives you basic slide functionality...</p>
    <h2>Extensions</h2>
    <p>Core gives you basic slide functionality...</p>
    <h2>Extensions</h2>
    <p>Core gives you basic slide functionality...</p>
    <h2>Extensions</h2>
    <p>Core gives you basic slide functionality...</p>
    <h2>Extensions</h2>
  </section>

  <section class="slide">
    <h1>Here</h1>
  </section>




    ###############################################################
    # jquery plugins for manipulating the contenteditable editor
    # in ways I need, using rangy mostly for cross-platform support
    # TODO: Move this to its own file.
    ###############################################################
    $.fn.extend
        # set_caret_position: move the cursor to given position in the given element
        salvusws_set_caret_position: (opts={}) ->
            opts = defaults opts,
                offset: 0
                type:   'character'   # 'range', 'character'
            @each () ->
                range = rangy.createRange()
                if opts.type == 'range'
                    range.setStart(this, opts.offset)
                    range.setEnd(this, opts.offset)
                else
                    range.selectCharacters(this, opts.offset, opts.offset)
                sel = rangy.getSelection()
                if sel.rangeCount > 0
                    sel.removeAllRanges()
                sel.addRange(range)

    class CaretPosition
        constructor: (@container, @offset) ->
        equals: (other) ->  # true if this and other are at the same position
            @container == other.container and @offset == other.offset
        set: (type='range') -> # moves the cursor to this position, if it exists
            range = rangy.createRange()
            range.setStart(@container, @offset)
            range.setEnd(@container, @offset)
            sel = rangy.getSelection()
            if sel.rangeCount > 0
                sel.removeAllRanges()
            sel.addRange(range)

    get_caret_position = () ->
        try
            sel   = rangy.getSelection()
            range = sel.getRangeAt(0)
            return new CaretPosition(range.startContainer, range.startOffset)
        catch error
            return undefined  # no caret position

--------------
        salvusws_text: (opts={}) ->   # returns text rather than a jquery wrapped object
            opts = defaults opts, {} # no options
            result = ''
            @each () ->
                that = this
                async.series([
                    (cb) -> client.html_to_text(html:$(that).html(), cb:((error, plain) -> result += plain; cb()))
                ])
                # This was the rangy implementation, but it was 10000 times slower than htmlparser, so screw that!
                #r = rangy.createRange()
                #r.selectNodeContents(this)
                #result += r.text()

            # &nbsp;'s are converted to character code 160, not 32 (which is a space).
            # We thus must replace all 32's by 160, or sage will be unhappy:
            return result.replace(/\xA0/g, " ")


                #cell.draggable().bind("click", () -> $(this).focus())
                #last_active_cell = active_cell = cell
                #.blur((e) -> active_cell=undefined; highlight(input:$(this)) )


                        #r2 = rangy.createRange()
                        #r2.selectNodeContents(newNode)
                        #r2.moveStart("character", 1)
                        #sel.setSingleRange(r2)
                        #sel.deleteFromDocument(r2)
                        #
                        sel.removeAllRanges()
                        r2 = rangy.createRange()
                        r2.setStart(newNode,1)
                        r2.setEnd(newNode,1)
                        if sel.rangeCount > 0
                            sel.removeAllRanges()
                        sel.addRange(r2)
                        return false

                        # r2 = rangy.createRange()
                        # r2.selectNodeContents(newNode)
                        # r2.moveStart("character", 1)
                        # sel.setSingleRange(r2)
                        # sel.deleteFromDocument(r2)

                        # sel.removeAllRanges()
                        # r2 = rangy.createRange()
                        # r2.setStart(newNode,1)
                        # r2.setEnd(newNode,1)
                        # if sel.rangeCount > 0
                        #     sel.removeAllRanges()
                        # sel.addRange(r2)

                        return false



        old_email_address = account_settings.settings.email_address
        account_settings.settings.email_address = $("#account-change_email_new_address").val()
        $("#account-change_email_new_address").val("")

        account_settings.save_to_server
            password   : password
            cb         : (error, mesg) ->
                console.log(error, mesg)
                account_settings.settings.email_address = old_email_address
                if error  # exceptional condition -- some sort of server or connection error
                    alert_message(type:"error", message:error)
                    return true   # kill modal (since this is a weird error condition)
                if mesg.event != "changed_email_address" # exceptional condition -- a *BUG*
                    alert_message(type:"error", message:"Internal or network error changing email address.")
                    return true   # kill modal
                if mesg.error  # there was an error
                    if mesg.reason?
                        $("#account-change_email_address-#{mesg.reason}").show()
                        return false
                    else
                        alert_message(type:"error", message:mesg.error)
                        return true
                else # no errors
                    $("#account-settings-email_address").html(mesg.new_email_address)
                    account_settings.settings.email_address = mesg.new_email_address
                    return true   # kill modal

        Mercury.config.behaviors.execute2 = (selection, options) ->
            e = selection.wrap('<div class="sage-cell">', true)
            console.log(e)
            e.execute_cell()

        Mercury.config.behaviors.execute = (selection, options) ->
            input = selection.textContent()
            output = ""
            salvus_exec input, (mesg) ->
                console.log(mesg)
                if mesg.stdout?
                    output += "<span class='sage-stdout'>#{mesg.stdout}</span>"
                if mesg.stderr?
                    output += "<span class='sage-stderr'>#{mesg.stderr}</span>"
                selection.insertNode("<span>" + input + "<br>" + output + "</span>")
                Mercury.trigger('reinitialize')

    $(window).on 'mercury:ready', () ->


