#!/usr/bin/env python

import argparse, os, sys,time

parser = argparse.ArgumentParser(description="Run all SMC daemons")
parser.add_argument("--timeout", dest="timeout", type=int, default=0,
    help="kill all processes if there is no activity for this many *seconds* (use 0 to disable, which is the default)")
args = parser.parse_args()

SAGEMATHCLOUD=os.path.abspath(os.path.dirname(__file__))

os.chdir(os.environ['HOME'])

def cmd(s):
    print s
    if os.system(". '%s'/sagemathcloud-env && "%SAGEMATHCLOUD + s):
       sys.exit(1)

cmd("cd '%s' && ./make_coffee"%SAGEMATHCLOUD)

cmd("local_hub start --timeout=%s"%args.timeout)

# we redirect to /dev/null to detach file descriptors so remote ssh terminates without waiting for these.
cmd("console_server start  </dev/null >/dev/null 2>&1 &")

cmd("sage_server    start  </dev/null >/dev/null 2>&1 &")

port_files = ["%s/data/%s.port"%(SAGEMATHCLOUD, s) for s in ['local_hub', 'console_server']]

def started():
    for p in port_files:
        if not os.path.exists(p):
            return False
    return True

# wait (up to 15 seconds) until the port files get created

# We *do not* worry about 'sage_server' above, since a user could easily mess up a custom Sage (or Python) install,
# and that would make it impossible to start the sage server... which would make it impossible to fix!

i=0
while not started():
    time.sleep(0.1)
    i += 1
    print i
    if i >= 150:
        sys.stderr.write("Error allocating network ports for local hub or console server -- giving up after 15 seconds.\n")
        sys.exit(1)


