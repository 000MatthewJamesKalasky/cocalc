class SageSpoofOut(SageObject): 
 	101	    """ 
 	102	    We replace the standard :class:`doctest._SpoofOut` for two reasons: 
 	103	 
 	104	    - we need to divert the output of C programs that don't print through sys.stdout, 
 	105	    - we want the ability to recover partial output from doctest processes that segfault. 
 	106	 
 	107	    INPUT: 
 	108	 
 	109	    - ``outfile`` -- an open file handle (usually from os.tmpfile) to which stdout should be redirected. 
 	110	 
 	111	    EXAMPLES:: 
 	112	 
 	113	        sage: import os 
 	114	        sage: from sage.doctest.forker import SageSpoofOut 
 	115	        sage: O = os.tmpfile() 
 	116	        sage: S = SageSpoofOut(O) 
 	117	        sage: try: 
 	118	        ....:     S.start_spoofing() 
 	119	        ....:     print "hello world" 
 	120	        ....: finally: 
 	121	        ....:     S.stop_spoofing() 
 	122	        ....: 
 	123	        sage: S.getvalue() 
 	124	        'hello world\n' 
 	125	    """ 
 	126	    def __init__(self, outfile, stdinfn=None): 
 	127	        """ 
 	128	        Initialization. 
 	129	        """ 
 	130	        if stdinfn is None: 
 	131	            stdinfn = sys.stdin.fileno() 
 	132	        self.outfile = outfile 
 	133	        self.spoofing = False 
 	134	        self.stdin_active = (sys.stdin.fileno() == 0) 
 	135	        self.stdin_active_original = self.stdin_active 
 	136	        self.dupfd = os.dup(sys.stdout.fileno()) 
 	137	        self.position = 0 
 	138	        self.stdinfn = stdinfn 
 	139	 
 	140	    def fileno(self): 
 	141	        """ 
 	142	        This object serves as stdout in various places, so we need to 
 	143	        emulate stdout's fileno in order to be able to recurse. 
 	144	 
 	145	        EXAMPLES:: 
 	146	 
 	147	            sage: import os 
 	148	            sage: from sage.doctest.forker import SageSpoofOut 
 	149	            sage: O = os.tmpfile() 
 	150	            sage: S = SageSpoofOut(O) 
 	151	            sage: S.fileno() == 1 
 	152	            True 
 	153	        """ 
 	154	        return sys.stdout.fileno() 
 	155	 
 	156	    def start_spoofing(self): 
 	157	        """ 
 	158	        Set stdout to print to outfile. 
 	159	 
 	160	        EXAMPLES:: 
 	161	 
 	162	            sage: import os 
 	163	            sage: from sage.doctest.forker import SageSpoofOut 
 	164	            sage: O = os.tmpfile() 
 	165	            sage: S = SageSpoofOut(O) 
 	166	            sage: try: 
 	167	            ....:     S.start_spoofing() 
 	168	            ....:     print "this is not printed" 
 	169	            ....: finally: 
 	170	            ....:     S.stop_spoofing() 
 	171	            ....: 
 	172	            sage: S.getvalue() 
 	173	            'this is not printed\n' 
 	174	 
 	175	        We also catch C output:: 
 	176	 
 	177	            sage: try: 
 	178	            ....:     S.start_spoofing() 
 	179	            ....:     retval = os.system('''echo "Hello there"\nif [ $? -eq 0 ]; then\necho "good"\nfi''') 
 	180	            ....: finally: 
 	181	            ....:     S.stop_spoofing() 
 	182	            ....: 
 	183	            sage: S.getvalue() 
 	184	            'Hello there\ngood\n' 
 	185	        """ 
 	186	        if not self.spoofing: 
 	187	            sys.stdout.flush() 
 	188	            os.dup2(self.outfile.fileno(), sys.stdout.fileno()) 
 	189	            self.spoofing = True 
 	190	 
 	191	    def stop_spoofing(self): 
 	192	        """ 
 	193	        Reset stdout to its original value. 
 	194	 
 	195	        EXAMPLES:: 
 	196	 
 	197	            sage: import os 
 	198	            sage: from sage.doctest.forker import SageSpoofOut 
 	199	            sage: O = os.tmpfile() 
 	200	            sage: S = SageSpoofOut(O) 
 	201	            sage: try: 
 	202	            ....:     S.start_spoofing() 
 	203	            ....:     print "this is not printed" 
 	204	            ....: finally: 
 	205	            ....:     S.stop_spoofing() 
 	206	            ....: 
 	207	            sage: print "this is now printed" 
 	208	            this is now printed 
 	209	        """ 
 	210	        if self.spoofing: 
 	211	            sys.stdout.flush() 
 	212	            os.dup2(self.dupfd, sys.stdout.fileno()) 
 	213	            self.spoofing = False 
 	214	 
 	215	    def getvalue(self): 
 	216	        """ 
 	217	        Gets the value that has been printed to the outfile since the last time this function was called. 
 	218	 
 	219	        EXAMPLES:: 
 	220	 
 	221	            sage: import os 
 	222	            sage: from sage.doctest.forker import SageSpoofOut 
 	223	            sage: O = os.tmpfile() 
 	224	            sage: S = SageSpoofOut(O) 
 	225	            sage: try: 
 	226	            ....:     S.start_spoofing() 
 	227	            ....:     print "step 1" 
 	228	            ....: finally: 
 	229	            ....:     S.stop_spoofing() 
 	230	            ....: 
 	231	            sage: S.getvalue() 
 	232	            'step 1\n' 
 	233	            sage: try: 
 	234	            ....:     S.start_spoofing() 
 	235	            ....:     print "step 2" 
 	236	            ....: finally: 
 	237	            ....:     S.stop_spoofing() 
 	238	            ....: 
 	239	            sage: S.getvalue() 
 	240	            'step 2\n' 
 	241	        """ 
 	242	        sys.stdout.flush() 
 	243	        self.outfile.seek(self.position) 
 	244	        result = self.outfile.read() 
 	245	        self.position = self.outfile.tell() 
 	246	        if not result.endswith("\n"): 
 	247	            result += "\n" 
 	248	        return result 
 	249	 
 	250	    def write(self, a): 
 	251	        """ 
 	252	        When debugging we need to pretend this object is stdout. 
 	253	 
 	254	        EXAMPLES:: 
 	255	 
 	256	            sage: import os 
 	257	            sage: from sage.doctest.forker import SageSpoofOut 
 	258	            sage: O = os.tmpfile() 
 	259	            sage: S = SageSpoofOut(O) 
 	260	            sage: try: 
 	261	            ....:     S.start_spoofing() 
 	262	            ....:     S.write("this is not printed\n") 
 	263	            ....: finally: 
 	264	            ....:     S.stop_spoofing() 
 	265	            ....: 
 	266	            sage: S.getvalue() 
 	267	            'this is not printed\n' 
 	268	        """ 
 	269	        sys.stdout.write(a) 
 	270	        sys.stdout.flush() 
 	271	 
 	272	    def unspoofed_write(self, a): 
 	273	        """ 
 	274	        Prints to the unspoofed standard out. 
 	275	 
 	276	        EXAMPLES:: 
 	277	 
 	278	            sage: import os 
 	279	            sage: from sage.doctest.forker import SageSpoofOut 
 	280	            sage: O = os.tmpfile() 
 	281	            sage: S = SageSpoofOut(O) 
 	282	            sage: try: 
 	283	            ....:     S.start_spoofing() 
 	284	            ....:     print "spoofed" 
 	285	            ....:     S.unspoofed_write("unspoofed\n") 
 	286	            ....: finally: 
 	287	            ....:     S.stop_spoofing() 
 	288	            ....: 
 	289	            unspoofed 
 	290	            sage: S.getvalue() 
 	291	            'spoofed\n' 
 	292	        """ 
 	293	        if self.spoofing: 
 	294	            try: 
 	295	                self.stop_spoofing() 
 	296	                sys.stdout.write(a) 
 	297	                sys.stdout.flush() 
 	298	            finally: 
 	299	                self.start_spoofing() 
 	300	        else: 
 	301	            sys.stdout.write(a) 
 	302	 
 	303	    def activate_stdin(self): 
 	304	        """ 
 	305	        Turns on stdin, which is useful when user input is needed in a subprocess. 
 	306	        """ 
 	307	        if not self.stdin_active: 
 	308	            self.stdin = os.dup(sys.stdin.fileno()) 
 	309	            os.dup2(self.stdinfn, sys.stdin.fileno()) 
 	310	            self.stdin_active = True 
 	311	 
 	312	    def deactivate_stdin(self): 
 	313	        """ 
 	314	        Restores stdin to its original state (which ignores user input 
 	315	        if this function is being called in a subprocess). 
 	316	        """ 
 	317	        if self.stdin_active and not self.stdin_active_original: 
 	318	            sys.stdin = os.fdopen(self.stdin) 
 	319	            self.stdin_active = False 
