TODAY's minimal goals:

  [x] configure worker VirtualBox Machine: 
          - put scripts into sagews repo
  [x] configure frontend Virtualbox Machine
  [ ] configure backend Virtualbox Machine (a copy of
      frontend but with different ssh key setup):
  [x] add code to frontend database to store details about workers (login@hostname)
  [ ] page to edit frontend database worker info
  [ ] add code to backend database to store details about workers they will use 
  [ ] way to push config info from frontend to backend about workers
  [ ] implementing backend starting worker via ssh (and scp'ing files, etc.)
  [ ] worker registering 
  [ ] actual session from browser with computation working, using worker
  [ ] make worker.py support ssl by default when using network socket
  [ ] make backend.py support ssl by default when using network socket


TODO List:


[x] implement worker.py demo using a normal socket on a port and benchmark

[ ] design workers so that they are very secure, using ephemeral
    accounts, limited-size git bundles, etc.:



[ ] implement design.
    




  [ ] fix permissions before spawning worker, and redo worker more effectively today -- project for today
   
      1. Run worker.py with:

            worker.py --backend_port=8080 --workspace_id=3

      2. Worker will register backend at the given port, and the
         backend will respond with a JSON object containing
         substantial additional data, e.g., path, username, resource
         limits, etc.

      3. worker.py then sets permission, ssh's to other account, 
         starts worker.py there, and exits. 
 
      This avoids using up file descriptors and is cleaner. 

            worker.py --stop

      Worker could autostop within n seconds of backend vanishing or
      of absolute timeout..., which would be much nicer than having to
      ssh into many accounts and kill things. 


[ ] general thing: write code that goes through and locks down
    permissions as much as possible...  runs on backend startup, etc.


=============================

ideas

today:

 [x] command line option to backend.py to take workers:
        --workers=
 [x] backend: placeholder decorator -- @frontend, which means whatever
     is making the request must be an authenticated frontend server.
        @frontend
 [x] backend: URL handler to create new workspace (and associated git repo)
        use POST with --
            * var: id -- integer
            * files: bundle -- git bundle (if not given make empty workspace)
 [x] backend git functions -- (not HTTP; will get used automatically(?) and by socket.io stuff)
         * save: make git snapshot of workspace with given id
         * revert: git changeset that make it like an old version (but do *not* delete history!)
 [x] ssh/code to launch worker.py

 [ ] look into Bootstrap -- http://twitter.github.com/bootstrap/javascript.html

 [ ] setup grp permissions of workspaces/id (and reading of the chain
     to it, but not of it)

 [ ] clean up after shutdown
       -- git checkout workspaces/id
 
 [ ] ** spawning of backend is very dangerous since if the management
     console or database are compromised at all (even by accident), then
     arbitrary code could be run on the frontend server!  Not good.
     So... instead of configuring the backend via options, let's pass in
     only the id and frontend uri, which we carefully sanitize, and
     send the other configuration?
     Also, never use os.system/os.popen, but instead subprocess.Popen,
     which is safer. **

--------------------------------------------------------------------------------------

 [ ] write Frontend

      [ ] write frontend.py server (flask + SQLalchemy version)

          [x] design an extensible data model that is simple enough to implement but
              powerful enough to be interesting and later extend to full
          [x] implement sqlalchemy database, copying from my old frontend.py code
          [ ] design a client/server setup that works with the data model
          [ ] implement frontend server part of model a bit
          [ ] implement desktop client (not polished) a bit
          [ ] implement mobile client (not polished) a bit

      [ ] write static/sagews/desktop/frontend

      [ ] write static/sagews/mobile/frontend


 [x] switch client server role for worker.py!

 [ ] (not sure I want to do this) properly spoof stdout/stderr.  This
     is done right in class SageSpoofOut(SageObject): that is in
     http://trac.sagemath.org/sage_trac/attachment/ticket/12415/12415_inprogress.patch
     and I've copied to spoof.txt in this directory temporarily.

 [ ] write backend.py

      [x] unix domain sockets client/server using tornado non-blocking sockets
      [ ] implement very basic backend desktop client (not polished)
      [ ] implement very basic backend mobile client (not polished)

 [ ] write worker.py 
      [x] register self with backend web server on startup, via a post request


DONE:  
  
 [x] Test: get process.py to doctest (possibly explicitly from command line)

 [x] Test: create file test.py that:
      (1) when run with no args, runs all test suites
      (2) when run with args, tests only those modules

 [x] store process-port.pid file somewhere else.

