TODO:

today:

 [x] command line option to backend.py to take workers:
        --workers=
 [x] backend: placeholder decorator -- @frontend, which means whatever
     is making the request must be an authenticated frontend server.
        @frontend
 [ ] backend: URL handler to create new workspace (and associated git repo)
        use POST with --
            * var: id -- integer
            * files: bundle -- git bundle (if not given make empty workspace)
 [ ] backend git functions -- (not HTTP; will get used automatically(?) and by socket.io stuff)
         * save: make git snapshot of workspace with given id
         * revert: git changeset that make it like an old version (but do *not* delete history!)
 [ ] setup grp permissions of workspaces/id (and reading of the chain
     to it, but not of it)
 [ ] ssh/code to launch worker.py
 [ ] clean up after shutdown
       -- git checkout workspaces/id
 
 [ ] spawning of backend is very dangerous since if the management
     console or database are compromised at all (even by accident), then
     arbitrary code could be run on the frontend server!  Not good.
     So... instead of configuring the backend via options, let's pass in
     only the id and frontend uri, which we carefully sanitize, and
     send the other configuration?
     Also, never use os.system/os.popen, but instead subprocess.Popen,
     which is safer.

--------------------------------------------------------------------------------------

 [ ] jmol in an iframe??

 [ ] write Frontend

      [ ] write frontend.py server (flask + SQLalchemy version)

          [x] design an extensible data model that is simple enough to implement but
              powerful enough to be interesting and later extend to full
          [x] implement sqlalchemy database, copying from my old frontend.py code
          [ ] design a client/server setup that works with the data model
          [ ] implement frontend server part of model a bit
          [ ] implement desktop client (not polished) a bit
          [ ] implement mobile client (not polished) a bit

      [ ] write static/sagews/desktop/frontend

      [ ] write static/sagews/mobile/frontend


 [x] switch client server role for worker.py!

 [ ] (not sure I want to do this) properly spoof stdout/stderr.  This
     is done right in class SageSpoofOut(SageObject): that is in
     http://trac.sagemath.org/sage_trac/attachment/ticket/12415/12415_inprogress.patch
     and I've copied to spoof.txt in this directory temporarily.

 [ ] write backend.py

      [x] unix domain sockets client/server using tornado non-blocking sockets
      [ ] implement very basic backend desktop client (not polished)
      [ ] implement very basic backend mobile client (not polished)

 [ ] write worker.py 
      [x] register self with backend web server on startup, via a post request

 [ ] implement deployment setup on Linux:
      [ ] n identical small chroot jails with maybe 1GB image each; 
          - the jail will "export" a unix domain socket, via a hardlink
          - jail runs one worker.py process
          - worker registers itself with backend  -- http://localhost:80
          - at most one user per jail
      [ ] process that starts/stops/resets jails, based on need.
          - copy clean "1GB?" image file

DONE:  
  
 [x] Test: get process.py to doctest (possibly explicitly from command line)

 [x] Test: create file test.py that:
      (1) when run with no args, runs all test suites
      (2) when run with args, tests only those modules

 [x] store process-port.pid file somewhere else.

