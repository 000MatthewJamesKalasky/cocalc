def launch_remote_server(args):
    if not args.username.startswith('sagews-worker'):
        raise RuntimeError, "worker username must start with sagews-worker"
    user = '%s@localhost'%args.username

    # 0. clean out home directory of user
    cmd = 'ssh %s rm -rf $HOME/*'
    log.debug(cmd)
    if not os.system(cmd):
        raise RuntimeError, "failed to clean out home directory of %s"%user
    
    # 1. send worker.py and git bundle:
    # create git bundle
    try:
        bundle = tempfile.mktemp()
        workspace_path = 'data/backend/workspaces/%s/'%args.workspace_id
        if not os.path.exists(workspace_path):
            raise RuntimeError, "no workspace at '%s'"%workspace_path
        cmd = "cd %s && git bundle create %s master"%(workspace_path, bundle)
        if not os.system(cmd):
            raise RuntimeError, "failed to create git bundle %s"%workspace_path

        cmd = 'scp worker.py %s %s:'%(bundle, user)
        if not os.system(cmd):
            raise RuntimeError, "failed to copy worker.py and bundle to %s"%user

    finally:
        # remove temporary bundle
        os.unlink(bundle)

    # 2. launch worker.py remotely.
    # TODO: opts
    cmd = 'ssh %s exec "%s"/sage -python worker.py %s'%(user, os.environ['SAGE_ROOT'], opts)
    if not os.system(cmd):
        raise RuntimeError, "failed to launch remote worker.py as %s"%user


            if mesg['exitcode'] == 0: # no problems
                # add one innocuous file: .gitignore, since empty git repos do not work well (no HEAD, etc.)
                open(os.path.join(path, '.gitignore'),'w').close()
                
            


    if not username.startswith('sagews-worker'):
        raise RuntimeError, "worker username must start with sagews-worker"
    filename = workspace_bundle(workspace_id)
    
    user = '%s@localhost'%username
    cmd = "ssh %s rm -rf * && chmod og-rwx $HOME"   # terrifying!
    os.popen(cmd).read()
    # clean $HOME of worker
    cmd = "ssh %s
    
    # scp worker.py and git bundle of the workspace to home
    # directory of worker.
    cmd = "exec ./sage worker.py --backend_port=%s &"%args.port
    log.debug(os.popen(cmd).read())





        - Use LXC lightweight operating system-level jailed virtualization
             - http://lxc.sourceforge.net/
             - http://www.nsnam.org/wiki/index.php/HOWTO_Use_Linux_Containers_to_set_up_virtual_networks
             - Communication with backend is via unix domain sockets
               Might require this patch (?):
                  http://www.mail-archive.com/lxc-devel@lists.sourceforge.net/msg00152.html

Frontend Data Model
-------------------

Table: User
Columns: id, name, passwd_hash

Table: UserSetting
Columns: user_id, prop, value, user

Table: Workspace
Columns: id, name, type, location, content (temporary)

Table: WorkspaceUser
Columns: workspace_id, user_id, type (e.g. 'share', 'owner', 'readonly')

Table: Resource
Columns: id, url, status, status_time, alloc_time, alloc_user_id, alloc_workspace_id


Ideas:

  Socket io talk with discussion of pickling sockets (at 26 min): http://www.youtube.com/watch?v=3BYN3ouwkRA

------------------------





class UserSetting(Base):
    """
    EXAMPLES::

        >>> drop_all(); create(); s = session()
        >>> u = User('wstein')
        >>> s.add(u)
        >>> s.commit()
        >>> b = UserSetting('timeout', '7')
        >>> u.user_settings.append(b)
        >>> s.commit()
        >>> s.query(User)[0].user_settings
        [<UserSetting wstein.timeout='7'>]
        >>> u.user_settings.append(UserSetting('account', 'pro'))
        >>> s.query(User)[0].user_settings
        [<UserSetting wstein.timeout='7'>, <UserSetting wstein.account='pro'>]

    Check uniqueness constraint::
    
        >>> c = UserSetting('timeout', '20')
        >>> u.user_settings.append(c)
        >>> s.commit()
        Traceback (most recent call last):
        ...
        FlushError: New instance <UserSetting...> with identity key (<class 'frontend_database_sqlalchemy.UserSetting'>, ('timeout',)) conflicts with persistent instance <UserSetting...>    
    """
    __tablename__ = "user_settings"
    user_id = Column(Integer, ForeignKey('users.id'))
    prop = Column(String, primary_key=True)
    value = Column(String)
    user = relationship("User", backref=backref('user_settings', order_by=prop))

    def __init__(self, prop, value):
        self.prop = prop
        self.value = value

    def __repr__(self):
        return "<UserSetting %s.%s='%s'>"%(self.user.name, self.prop, self.value)

        
class Workspace(Base):
    """
    EXAMPLES::
    
        >>> drop_all(); create(); s = session()
        >>> d = Workspace('Worksheet 1', 'worksheet', 'gae:794569'); d
        <Workspace 'Worksheet 1' of type worksheet at 'gae:794569'>
        >>> s.add(d); s.commit()
        >>> session().query(Workspace).all()
        [<Workspace 'Worksheet 1' of type worksheet at 'gae:794569'>]
        >>> d2 = Workspace('Worksheet 2', 'worksheet', content="2+2"); d2
        <Workspace 'Worksheet 2' of type worksheet>
        >>> d2.content
        '2+2'
        >>> s.add(d2); s.commit()
    """
    __tablename__ = "workspaces"
    id = Column(Integer, primary_key=True)    
    name = Column(String)
    type = Column(String)
    location = Column(String)

    # Storing the content of an entire workspace in one single string
    # is just a very temporary thing.  Often it will be, e.g., a
    # project on github, a directory on google drive or something else
    # like that.
    content = Column(String)  

    def __init__(self, name, type, location=None, content=None):
        self.name = str(name)
        self.type = str(type)
        if location is not None:
            self.location = str(location)
        if content is not None:
            self.content = str(content)

    def __repr__(self):
        return "<Workspace '%s' of type %s%s>"%(self.name, self.type, " at '%s'"%self.location if self.location else '')
        

class WorkspaceUser(Base):
    """
    EXAMPLES::

        >>> drop_all(); create(); s = session()
        >>> d = Workspace('Worksheet 1', 'worksheet', 'gae:794569'); u = User('wstein'); u2 = User('xyz')
        >>> s.add(d); s.add(u); s.add(u2); s.commit()
        >>> d.users.append(WorkspaceUser(d.id, u.id, 'owner'))
        >>> d.users.append(WorkspaceUser(d.id, u2.id, 'collab'))
        >>> s.commit()
        >>> v = s.query(Workspace).one().users; v
        [<user_id=2, workspace_id=1, type=collab>, <user_id=1, workspace_id=1, type=owner>]
        >>> v[0].workspace
        <Workspace 'Worksheet 1' of type worksheet at 'gae:794569'>
        >>> v[0].user
        <User 'xyz'>
        >>> u.workspaces
        [<user_id=1, workspace_id=1, type=owner>]
    """
    __tablename__ = "workspace_users"
    workspace_id = Column(Integer, ForeignKey('workspaces.id'), primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'), primary_key=True)
    type = Column(String)
    
    workspace = relationship("Workspace", backref=backref('users', order_by=type))
    user = relationship("User", backref=backref('workspaces', order_by=type))    
    
    def __init__(self, workspace_id, user_id, type):
        self.user_id = user_id
        self.workspace_id = workspace_id
        self.type = type

    def __repr__(self):
        return "<user_id=%s, workspace_id=%s, type=%s>"%(self.user_id, self.workspace_id, self.type)


class Resource(Base):
    """
    EXAMPLES::
    
        >>> drop_all(); create(); s = session()
        >>> r = Resource('http://127.0.0.1:5010')
        >>> s.add(r); s.commit(); r
        <Resource 1 at http://127.0.0.1:5010>
        >>> s.query(Resource).one()
        <Resource 1 at http://127.0.0.1:5010>
        >>> r2 = Resource('http://127.0.0.1:5011'); r2
        <Resource None at http://127.0.0.1:5011>

    We commit so that the id gets set::
    
        >>> s.add(r2); s.commit(); r2
        <Resource 2 at http://127.0.0.1:5011>

    Look at some of the other properties (should all be empty)::

        >>> r.status_time is None
        True
        >>> r.alloc_time is None
        True
        >>> r.alloc_user_id is None
        True
        >>> r.alloc_workspace_id is None
        True
    """
    __tablename__ = "resources"
    id = Column(Integer, primary_key=True)
    url = Column(String)
    status = Column(String)
    status_time = Column(DateTime)
    alloc_time = Column(DateTime)
    alloc_user_id = Column(Integer, ForeignKey('users.id'))
    alloc_workspace_id = Column(Integer, ForeignKey('workspaces.id'))
    
    def __init__(self, url):
        self.url = str(url)

    def __repr__(self):
        return "<Resource %s at %s>"%(self.id, self.url)

