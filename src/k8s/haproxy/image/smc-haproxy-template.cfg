# This file uses golang text templates (http://golang.org/pkg/text/template/) to
# dynamically configure the haproxy loadbalancer.
global
    daemon
    stats socket /tmp/haproxy
    server-state-file global
    server-state-base /var/state/haproxy/

{{ if eq .startSyslog "true" }}
    # log using a syslog socket
    log /var/run/haproxy.log.socket local0 info
    log /var/run/haproxy.log.socket local0 notice
{{ end }}

ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK

ssl-default-bind-options no-tls-tickets

tune.ssl.default-dh-param 2048

defaults
    log global

    load-server-state-from-file global

    # Enable session redistribution in case of connection failure.
    option redispatch

    # Disable logging of null connections (haproxy connections like checks).
    # This avoids excessive logs from haproxy internals.
    option dontlognull

    # Enable HTTP connection closing on the server side.
    option http-server-close

    # Enable insertion of the X-Forwarded-For header to requests sent to
    # servers and keep client IP address.
    option forwardfor

    # Enable HTTP keep-alive from client to server.
    option http-keep-alive

    # Clients should send their full http request in 5s.
    timeout http-request    5s

    # Maximum time to wait for a connection attempt to a server to succeed.
    timeout connect         5s

    # Maximum inactivity time on the client side.
    # Applies when the client is expected to acknowledge or send data.
    timeout client          10s

    # Inactivity timeout on the client side for half-closed connections.
    # Applies when the client is expected to acknowledge or send data
    # while one direction is already shut down.
    timeout client-fin      10s

    # Maximum inactivity time on the server side.
    timeout server          5s

    # timeout to use with WebSocket and CONNECT
    timeout tunnel          120s

    # Maximum allowed time to wait for a new HTTP request to appear.
    # See https://support.cloudflare.com/hc/en-us/articles/212794707-General-Best-Practices-for-Load-Balancing-with-CloudFlare
    timeout http-keep-alive 300s

    # default traffic mode is http
    # mode is overwritten in case of tcp services
    mode http

    stats   enable
    stats   uri     /haproxy
    stats   realm   Haproxy\    Statistics

# haproxy stats, required hostport and firewall rules for :1936
listen stats
    bind *:1936
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /

# Dynamically create all the backend load balancing rules, based on knowledge
# of all the ip addresses of pods.  We only actually create smc-webapp-static, hub, etc., and
# ignore any others.

{{range $i, $svc := .services.http}}
{{ $svcName := $svc.Name }}
# http service -- {{$svc.Name}}
{{ if eq $svcName "smc-webapp-static" }}
backend smc-webapp-static
    option  httplog
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

    balance roundrobin
    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} check port {{$svc.BackendPort}} inter 5
    {{end}}
{{end}}
{{ if eq $svcName "smc-hub:5000" }}
backend hub
    balance leastconn
    option httpclose
    timeout server 7s
    option httpchk /alive
    cookie SMCSERVERID3 insert indirect nocache # this specific cookie is also referenced in client_browser.coffee -- and also below for the proxy (more efficient to have same process do both)
    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} cookie s{{$j}} check port {{$svc.BackendPort}} inter 5
    {{end}}
{{ end}}
{{ if eq $svcName "smc-hub:5001" }}
backend hub-proxy
    balance leastconn
    cookie SMCSERVERID3 insert indirect nocache      # this specific cookie is also referenced in client_browser.coffee!
    option httpclose
    timeout server 7s
    retries 10
    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} cookie s{{$j}} check port {{$svc.BackendPort}} inter 5
    {{end}}
{{ end }}
{{ end }}

frontend http
    bind    *:80
    redirect scheme https if !{ ssl_fc }

frontend https
    bind    *:443 ssl crt /secret/nopassphrase.pem no-sslv3
    reqadd  X-Forwarded-Proto:\ https
    timeout client 20s

    # replace "/policies/" with "/static/policies/" at the beginning of any request path.
    reqrep ^([^\ :]*)\ /policies/(.*)     \1\ /static/policies/\2
    acl         is_static path_beg /static

    acl         is_hub path_beg /hub /cookies /blobs /invoice /upload /alive /auth /stats /registration /projects /help /settings /customize /base_url.js

    acl         is_proxy path_reg ^/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/port
    acl         is_proxy path_reg ^/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/raw

    # Only actually use the backends that we defined!

    {{ range $i, $svc := .services.http }}

    {{ if eq $svc.Name "smc-webapp-static" }}
    use_backend smc-webapp-static if is_static
    default_backend smc-webapp-static
    {{ end }}

    {{ if eq $svc.Name "smc-hub:5000" }}
    use_backend hub if is_hub
    {{ end }}

    {{ if eq $svc.Name "smc-hub:5001" }}
    use_backend hub-proxy if is_proxy
    {{ end }}

    {{ end }}



#frontend health
#    bind *:60000
#    acl hub_dead   nbsrv(hub)   lt 1
#    acl proxy_dead nbsrv(proxy) lt 1
#    monitor-uri /health-check
#    monitor fail if hub_dead || proxy_dead
