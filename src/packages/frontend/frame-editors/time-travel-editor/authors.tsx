/*
 *  This file is part of CoCalc: Copyright © 2020 Sagemath, Inc.
 *  License: MS-RSL – see LICENSE.md for details
 */

import { Tooltip } from "antd";
const { User } = require("../../users");
import { Loading, r_join } from "../../components";
import { TimeTravelActions } from "./actions";
import {
  isEncodedNumUUID,
  decodeUUIDtoNum,
} from "@cocalc/util/compute/manager";
import ComputeServer from "@cocalc/frontend/compute/inline";
import { useTypedRedux } from "@cocalc/frontend/app-framework";

interface Props {
  actions: TimeTravelActions;
  version0: number;
  version1: number;
}

export function Authors(props: Props) {
  const userMap = useTypedRedux("users", "user_map");

  const renderUser = (account_id: string) => {
    return <User account_id={account_id} user_map={userMap} key={account_id} />;
  };

  const renderProject = () => {
    return (
      <Tooltip
        title={"This change or output was generated by the Project."}
        key="project-author"
      >
        <span>The Project</span>
      </Tooltip>
    );
  };

  const renderUnknown = () => {
    return (
      <Tooltip
        title={"You are no longer a collaborator with this user"}
        key={"unknown-author"}
      >
        <span>Unknown</span>
      </Tooltip>
    );
  };

  const renderComputeServer = (id: number) => {
    return (
      <Tooltip
        key={`compute-server${id}`}
        title={
          <>
            This change or output was generated by <ComputeServer id={id} />.
          </>
        }
      >
        <span>
          <ComputeServer id={id} titleOnly />
        </span>
      </Tooltip>
    );
  };

  const renderAuthor = (account_id: string) => {
    if (userMap != null && userMap.has(account_id)) {
      return renderUser(account_id);
    } else if (account_id == props.actions.project_id) {
      return renderProject();
    } else if (isEncodedNumUUID(account_id)) {
      return renderComputeServer(decodeUUIDtoNum(account_id));
    } else {
      return renderUnknown();
    }
  };

  const renderContent = () => {
    if (userMap == null) {
      return <Loading />;
    }
    const v: JSX.Element[] = [];
    for (const account_id of props.actions.get_account_ids(
      props.version0,
      props.version1,
    )) {
      v.push(renderAuthor(account_id));
    }
    if (v.length == 0) return renderUnknown();
    return r_join(v);
  };

  return <span>{renderContent()}</span>;
}
