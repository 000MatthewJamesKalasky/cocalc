###
Show the last latex build log, i.e., output from last time we ran the LaTeX build process.
###

{ButtonGroup, Button, DropdownButton, MenuItem}   = require('react-bootstrap')

misc = require('smc-util/misc')

{React, ReactDOM, rclass, rtypes, Fragment} = require('../smc-react')

{Icon, Loading} = require('../r_misc')

util = require('../code-editor/util')

BUILD_SPEC =
    recompile:
        label : "Recompile"
        icon  : 'retweet'
        tip   : 'Recompile the document, running LaTeX, BibTex, Sage, etc.'

    latex:
        label : "LaTeX"
        icon  : 'cc-icon-tex-file'
        tip   : 'Run the LaTeX build command'

    bibtex:
        label : "Bibtex"
        icon  : 'file-code-o'
        tip   : 'Process bibliography using Bibtex'

    sagetex:
        label : "SageTex"
        icon  : 'cc-icon-sagemath-bold'
        tip   : 'Run SageTex, if necessary'

    clean:
        label : "Clean"
        icon  : 'trash'
        tip   : 'Delete all autogenerated auxiliary files'



exports.BuildLog = rclass ({name}) ->
    displayName: 'LaTeXEditor-BuildLog'

    propTypes :
        id            : rtypes.string.isRequired
        actions       : rtypes.object.isRequired
        editor_state  : rtypes.immutable.Map
        is_fullscreen : rtypes.bool
        project_id    : rtypes.string
        path          : rtypes.string
        reload        : rtypes.number
        font_size     : rtypes.number

    reduxProps:
        "#{name}":
            build_log : rtypes.immutable.Map
            status    : rtypes.string

    shouldComponentUpdate: (props) ->
        return misc.is_different(@props, props, ['build_log', 'status', 'font_size'])

    render_latex: ->
        value = (@props.build_log?.getIn(['latex', 'stdout']) ? '') + (@props.build_log?.getIn(['latex', 'stderr']) ? '')
        if not value
            return
        <Fragment>
            <h4>LaTeX Output</h4>
            <textarea
                readOnly = {true}
                style    = {color: '#666', background: '#f8f8f0', display: 'block', width: '100%', padding: '10px', flex:1}
                value    = {value}
            />
        </Fragment>

    render_clean: ->
        value = @props.build_log?.get('clean')
        if not value
            return
        <Fragment>
            <h4>Clean Auxiliary Files</h4>
            <textarea
                readOnly = {true}
                style    = {color: '#666', background: '#f8f8f0', display: 'block', width: '100%', padding: '10px', flex:1}
                value    = {value}
            />
        </Fragment>

    render_status: ->
        if @props.status
            <div>
                <Loading
                    text  = {@props.status}
                    style = {fontSize: '18pt', textAlign: 'center', marginTop: '15px', color: '#333'}
                />
            </div>

    render_build_action_button: (action, spec) ->
        <Button
            key      = {spec.label}
            title    = {spec.tip}
            onClick  = {=>@props.actions.build_action(action)}
            disabled = {!!@props.status}
        >
            <Icon name={spec.icon}/> {spec.label}
        </Button>

    render_buttons: ->
        <ButtonGroup>
            {(@render_build_action_button(action, spec) for action, spec of BUILD_SPEC)}
        </ButtonGroup>

    render_build_command: ->

    render: ->
        <div
            className = {'smc-vfill'}
            style     = {overflowY: 'scroll', padding: '5px 15px', fontSize:"#{@props.font_size}px"}
        >
            {@render_buttons()}
            {@render_build_command()}
            {@render_status()}
            {@render_latex()}
            {@render_clean()}
        </div>