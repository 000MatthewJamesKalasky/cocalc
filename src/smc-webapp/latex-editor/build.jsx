/*
Show the last latex build log, i.e., output from last time we ran the LaTeX build process.
*/

const {
    ButtonGroup,
    Button,
    DropdownButton,
    MenuItem
} = require("react-bootstrap");

import { is_different } from "smc-util/misc";

import { React, ReactDOM, rclass, rtypes, Fragment } from "../smc-react";

import { Icon, Loading } from "../r_misc";

const BUILD_SPEC = {
    recompile: {
        label: "Recompile",
        icon: "retweet",
        tip: "Recompile the document, running LaTeX, BibTex, Sage, etc."
    },

    latex: {
        label: "LaTeX",
        icon: "cc-icon-tex-file",
        tip: "Run the LaTeX build command"
    },

    bibtex: {
        label: "BibTeX",
        icon: "file-code-o",
        tip: "Process bibliography using Bibtex"
    },

    sagetex: {
        label: "SageTex",
        icon: "cc-icon-sagemath-bold",
        tip: "Run SageTex, if necessary"
    },

    clean: {
        label: "Clean",
        icon: "trash",
        tip: "Delete all autogenerated auxiliary files"
    }
};

exports.Build = rclass(function({ name }) {
    return {
        displayName: "LaTeXEditor-Build",

        propTypes: {
            id: rtypes.string.isRequired,
            actions: rtypes.object.isRequired,
            editor_state: rtypes.immutable.Map,
            is_fullscreen: rtypes.bool,
            project_id: rtypes.string,
            path: rtypes.string,
            reload: rtypes.number,
            font_size: rtypes.number
        },

        reduxProps: {
            [name]: {
                build_log: rtypes.immutable.Map,
                status: rtypes.string
            }
        },

        shouldComponentUpdate(props) {
            return is_different(this.props, props, [
                "build_log",
                "status",
                "font_size"
            ]);
        },

        render_log(stage) {
            let left, left1, left2;
            const value =
                ((left =
                    this.props.build_log != null
                        ? this.props.build_log.getIn([stage, "stdout"])
                        : undefined) != null
                    ? left
                    : "") +
                ((left1 =
                    this.props.build_log != null
                        ? this.props.build_log.getIn([stage, "stderr"])
                        : undefined) != null
                    ? left1
                    : "");
            if (!value) {
                return;
            }
            let time =
                (left2 =
                    this.props.build_log != null
                        ? this.props.build_log.getIn([stage, "time"])
                        : undefined) != null
                    ? left2
                    : "";
            if (time) {
                time = `(${(time / 1000).toFixed(1)} seconds)`;
            }
            return (
                <Fragment>
                    <h5>
                        {BUILD_SPEC[stage].label} Output {time}
                    </h5>
                    <textarea
                        readOnly={true}
                        style={{
                            color: "#666",
                            background: "#f8f8f0",
                            display: "block",
                            width: "100%",
                            padding: "10px",
                            flex: 1
                        }}
                        value={value}
                    />
                </Fragment>
            );
        },

        render_clean() {
            const value =
                this.props.build_log != null
                    ? this.props.build_log.get("clean")
                    : undefined;
            if (!value) {
                return;
            }
            return (
                <Fragment>
                    <h4>Clean Auxiliary Files</h4>
                    <textarea
                        readOnly={true}
                        style={{
                            color: "#666",
                            background: "#f8f8f0",
                            display: "block",
                            width: "100%",
                            padding: "10px",
                            flex: 1
                        }}
                        value={value}
                    />
                </Fragment>
            );
        },

        render_status() {
            if (this.props.status) {
                return (
                    <div style={{ margin: "15px" }}>
                        <Loading
                            text={this.props.status}
                            style={{
                                fontSize: "18pt",
                                textAlign: "center",
                                marginTop: "15px",
                                color: "#666"
                            }}
                        />
                    </div>
                );
            }
        },

        render_build_action_button(action, spec) {
            return (
                <Button
                    key={spec.label}
                    title={spec.tip}
                    onClick={() => this.props.actions.build_action(action)}
                    disabled={!!this.props.status}
                    bsStyle={spec.bsStyle}
                >
                    <Icon name={spec.icon} /> {spec.label}
                </Button>
            );
        },

        render_buttons() {
            return (
                <ButtonGroup>
                    {(() => {
                        const result = [];
                        for (let action in BUILD_SPEC) {
                            const spec = BUILD_SPEC[action];
                            result.push(
                                this.render_build_action_button(action, spec)
                            );
                        }
                        return result;
                    })()}
                </ButtonGroup>
            );
        },

        render() {
            return (
                <div
                    className={"smc-vfill"}
                    style={{
                        overflowY: "scroll",
                        padding: "5px 15px",
                        fontSize: `${this.props.font_size}px`
                    }}
                >
                    {this.render_buttons()}
                    {this.render_status()}
                    {this.render_log("latex")}
                    {this.render_log("sagetex")}
                    {this.render_log("bibtex")}
                    {this.render_clean()}
                </div>
            );
        }
    };
});
