###
Share server

ENDPOINTS:

- /alive - that this is working, database is responding, etc.
- raw   - raw unmodified static browser through all shared files in all projects
- share - browser through all shared files in all projects, but where pages are generated by backend server

###

os_path      = require('path')

express      = require('express')
http         = require('http')

hub_register = require('../hub_register')

misc         = require('smc-util/misc')
{defaults, required} = misc

exports.init = (opts) ->
    console.log 'share server - doing nothing'
    opts = defaults opts,
        database       : required
        base_url       : required
        port           : required
        host           : required
        share_path     : required
        logger         : undefined

    opts.logger?.debug("initializing express http share server")

    # Create an express application
    router = express.Router()
    app    = express()

    router.get '/', (req, res) ->
        res.send("<a href='raw'>raw</a><br/><a href='share'>share</a>")

    router.get '/alive', (req, res) ->
        if not hub_register.database_is_working()
            # this will stop haproxy from routing traffic to us
            # until db connection starts working again.
            opts.logger?.debug("alive: answering *NO*")
            res.status(404).end()
        else
            res.send('alive')

    router.get '/', (req, res) ->
        res.send("<a href='raw'>raw</a><br/><a href='share'>share</a>")

    raw_router = exports.raw_router
        database   : opts.database
        share_path : opts.share_path
        logger     : opts.logger

    share_router = exports.share_router
        database   : opts.database
        share_path : opts.share_path
        logger     : opts.logger

    if opts.base_url
        app.use(opts.base_url, router)
        app.use(opts.base_url + '/raw',   raw_router)
        app.use(opts.base_url + '/share', share_router)
    else
        app.use(router)
        app.use('/raw',   raw_router)
        app.use('/share', share_router)

    http_server = http.createServer(app)
    return {http_server:http_server, express_router:router}

exports.raw_router = (opts) ->
    opts = defaults opts,
        database   : required
        share_path : required
        logger     : undefined

    router = express.Router()

    router.get '/', (req, res) ->
        res.send("raw router")

    router.get '*', (req, res) ->
        project_id = req.path.slice(1,37)
        if not misc.is_valid_uuid_string(project_id)
            res.status(404).end()
            return
        path = req.path.slice(38)
        public_access_request
            project_id : project_id
            path       : path
            cb         : (err, is_public) ->
                if err
                    # TODO
                    res.send("error: ", err)
                else if not is_public
                    res.status(404).end()
                else
                    dir = opts.share_path.replace('[project_id]', project_id)
                    res.sendFile(os_path.join(dir, path))

exports.share_router = (opts) ->
    opts = defaults opts,
        database   : required
        share_path : required
        logger     : undefined

    router = express.Router()

    router.get '/', (req, res) ->
        res.send("share router")

public_access_request = (opts) =>
    opts = defaults opts,
        database   : required
        project_id : required
        path       : required
        cb         : required
    # 1. check if valid
    # 2. increment database counter or log or something
    opts.cb(undefined, true)


